{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/devdlaner/nf-tickets/front-end/src/components/CreateEntityPage.tsx"],"sourcesContent":["// frontend/src/components/CreateEntityPage.tsx\n'use client';\n\nimport React, { useState } from 'react';\nimport { useAnchorWallet, useWallet } from '@solana/wallet-adapter-react';\nimport { AnchorProvider, Program, web3, utils, Idl } from '@coral-xyz/anchor';\n\nexport default function CreateEntityPage() {\n  const wallet = useAnchorWallet();\n  const { connect, connected } = useWallet();\n  const [name, setName] = useState('');\n  const [status, setStatus] = useState<string | null>(null);\n\n  const handleCreate = async () => {\n    const rpcUrl = process.env.NEXT_PUBLIC_SOLANA_RPC_URL || 'http://127.0.0.1:8899';\n    const programIdStr = process.env.NEXT_PUBLIC_PROGRAM_ID;\n\n    console.log('üî• NEXT_PUBLIC_SOLANA_RPC_URL =', rpcUrl);\n    console.log('üî• Program ID =', programIdStr);\n\n    if (!wallet || !programIdStr) {\n      setStatus('Wallet or Program ID missing.');\n      return;\n    }\n\n    setStatus('Fetching IDL and sending transaction...');\n\n    try {\n      // 1) Load IDL dynamically from public folder\n      const idl: Idl = await fetch('/idl/ticketing.json').then(res => {\n        if (!res.ok) throw new Error(`Failed to load IDL: ${res.status}`);\n        return res.json();\n      });\n      console.log('üî• IDL loaded =', idl);\n\n      // 2) Setup connection and provider\n      const connection = new web3.Connection(rpcUrl, 'processed');\n      const provider = new AnchorProvider(connection, wallet, AnchorProvider.defaultOptions());\n\n      // 3) Instantiate program using IDL and provider\n      const programId = new web3.PublicKey(process.env.NEXT_PUBLIC_PROGRAM_ID!);\n      const program = new Program(idl as Idl, provider);\n\n      // 4) Derive PDA\n      const [entityPda] = web3.PublicKey.findProgramAddressSync(\n        [utils.bytes.utf8.encode('entity'), wallet.publicKey.toBuffer()],\n        program.programId\n      );\n\n      // 5) RPC call\n      await program.methods\n        .initializeEntity(name)\n        .accounts({\n          entity: entityPda,\n          authority: wallet.publicKey,\n          systemProgram: web3.SystemProgram.programId,\n        })\n        .rpc();\n\n      setStatus(`‚úÖ Entity created at ${entityPda.toBase58()}`);\n    } catch (err: any) {\n      console.error(err);\n      setStatus(`‚ùå Error: ${err.message}`);\n    }\n  };\n\n  return (\n    <div className=\"max-w-md mx-auto mt-8 border rounded-lg p-6 shadow\">\n      {!connected ? (\n        <button\n          onClick={() => connect()}\n          className=\"w-full py-2 bg-purple-600 text-white rounded\"\n        >\n          Connect Wallet\n        </button>\n      ) : (\n        <div className=\"space-y-4\">\n          <input\n            className=\"w-full p-2 border rounded\"\n            placeholder=\"Entity name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n          />\n          <button\n            onClick={handleCreate}\n            disabled={!name}\n            className=\"w-full py-2 bg-purple-600 text-white rounded disabled:opacity-50\"\n          >\n            Create Entity\n          </button>\n          {status && <p className=\"text-sm\">{status}</p>}\n        </div>\n      )}\n    </div>\n  );\n}\n\n\n\n\n\n// // frontend/src/components/CreateEntityPage.tsx\n// 'use client';\n// import React, { useState } from 'react';\n// import { useAnchorWallet, useWallet } from '@solana/wallet-adapter-react';\n// import { AnchorProvider, Program, web3, utils } from '@coral-xyz/anchor';\n\n// export default function CreateEntityPage() {\n//   const wallet = useAnchorWallet();\n//   const { connect, connected } = useWallet();\n//   const [name, setName] = useState('');\n//   const [status, setStatus] = useState<string | null>(null);\n\n//   const handleCreate = async () => {\n//     // Debug logs\n//     console.log('üî• NEXT_PUBLIC_SOLANA_RPC_URL =', process.env.NEXT_PUBLIC_SOLANA_RPC_URL);\n//     const programId = process.env.NEXT_PUBLIC_PROGRAM_ID;\n//     console.log('üî• Program ID =', programId);\n\n//     if (!wallet) {\n//       setStatus('Please connect your wallet first.');\n//       return;\n//     }\n//     setStatus('Fetching IDL and sending transaction...');\n\n//     // 1) Load IDL dynamically from public folder\n//     const idl = await fetch('/idl/ticketing.json').then(res => {\n//       if (!res.ok) throw new Error(`Failed to load IDL: ${res.status}`);\n//       return res.json();\n//     });\n//     console.log('üî• IDL loaded =', idl);\n\n//     // 2) Setup connection and provider\n//     const rpcUrl = process.env.NEXT_PUBLIC_SOLANA_RPC_URL || 'http://127.0.0.1:8899';\n//     const connection = new web3.Connection(rpcUrl, 'processed');\n//     const provider = new AnchorProvider(connection, wallet, {});\n\n//         // 3) Instantiate program using provider and dynamic IDL\n//     const ProgramAny: any = Program;\n//     const program = new ProgramAny(\n//       provider,\n//       idl\n//     );\n\n//     try {\n//       // Derive PDA\n//       const [entityPda] = web3.PublicKey.findProgramAddressSync(\n//         [utils.bytes.utf8.encode('entity'), wallet.publicKey!.toBuffer()],\n//         program.programId\n//       );\n\n//       // RPC call\n//       await program.methods\n//         .initializeEntity(name)\n//         .accounts({\n//           entity: entityPda,\n//           authority: wallet.publicKey!,\n//           systemProgram: web3.SystemProgram.programId,\n//         })\n//         .rpc();\n\n//       setStatus(`Entity created at ${entityPda.toBase58()}`);\n//     } catch (err: any) {\n//       console.error(err);\n//       setStatus(`Error: ${err.message}`);\n//     }\n//   };\n\n//   return (\n//     <div className=\"max-w-md mx-auto mt-8 border rounded-lg p-6 shadow\">\n//       {!connected ? (\n//         <button\n//           onClick={() => connect()}\n//           className=\"w-full py-2 bg-purple-600 text-white rounded\"\n//         >\n//           Connect Wallet\n//         </button>\n//       ) : (\n//         <div className=\"space-y-4\">\n//           <input\n//             className=\"w-full p-2 border rounded\"\n//             placeholder=\"Entity name\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//           />\n//           <button\n//             onClick={handleCreate}\n//             disabled={!name}\n//             className=\"w-full py-2 bg-purple-600 text-white rounded disabled:opacity-50\"\n//           >\n//             Create Entity\n//           </button>\n//           {status && <p className=\"text-sm\">{status}</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n\n\n\n// // frontend/src/components/CreateEntityPage.tsx\n// 'use client';\n// import React, { useState } from 'react';\n// import { useAnchorWallet, useWallet } from '@solana/wallet-adapter-react';\n// import { AnchorProvider, Program, web3, utils } from '@coral-xyz/anchor';\n\n// // Import IDL JSON, handle CJS default export\n// import idlJson from '../idl/ticketing.json';\n// const idl = (idlJson as any).default ?? idlJson;\n\n// export default function CreateEntityPage() {\n//   const wallet = useAnchorWallet();\n//   const { connect, connected } = useWallet();\n//   const [name, setName] = useState('');\n//   const [status, setStatus] = useState<string | null>(null);\n\n//   const handleCreate = async () => {\n//     // Debug logs\n//     console.log('üî• NEXT_PUBLIC_SOLANA_RPC_URL =', process.env.NEXT_PUBLIC_SOLANA_RPC_URL);\n//     const programId = process.env.NEXT_PUBLIC_PROGRAM_ID;\n//     console.log('üî• Program ID =', programId);\n\n//     if (!wallet) {\n//       setStatus('Please connect your wallet first.');\n//       return;\n//     }\n//     setStatus('Fetching IDL and sending transaction...');\n\n//     // 1) Load IDL dynamically to avoid structuredClone errors\n//     const idl = await fetch('/idl/ticketing.json').then(res => res.json());\n//     console.log('üî• IDL loaded =', idl);\n\n//     // 2) Setup connection and provider\n//     const rpcUrl = process.env.NEXT_PUBLIC_SOLANA_RPC_URL || 'http://127.0.0.1:8899';\n//     const connection = new web3.Connection(rpcUrl, 'processed');\n//     const provider = new AnchorProvider(connection, wallet, {});\n\n//     // 3) Instantiate program\n//         // 3) Instantiate program (bypass TS type issues)\n//     const ProgramAny: any = Program;\n//     const program = new ProgramAny(\n//       idl,\n//       new web3.PublicKey(programId!),\n//       provider\n//     );\n\n//     try {\n//       // Derive PDA\n//       const [entityPda] = web3.PublicKey.findProgramAddressSync(\n//         [utils.bytes.utf8.encode('entity'), wallet.publicKey!.toBuffer()],\n//         program.programId\n//       );\n\n//       // RPC call\n//       await program.methods\n//         .initializeEntity(name)\n//         .accounts({\n//           entity: entityPda,\n//           authority: wallet.publicKey!,\n//           systemProgram: web3.SystemProgram.programId,\n//         })\n//         .rpc();\n\n//       setStatus(`Entity created at ${entityPda.toBase58()}`);\n//     } catch (err: any) {\n//       console.error(err);\n//       setStatus(`Error: ${err.message}`);\n//     }\n//   };\n\n//   return (\n//     <div className=\"max-w-md mx-auto mt-8 border rounded-lg p-6 shadow\">\n//       {!connected ? (\n//         <button\n//           onClick={() => connect()}\n//           className=\"w-full py-2 bg-purple-600 text-white rounded\"\n//         >\n//           Connect Wallet\n//         </button>\n//       ) : (\n//         <div className=\"space-y-4\">\n//           <input\n//             className=\"w-full p-2 border rounded\"\n//             placeholder=\"Entity name\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//           />\n//           <button\n//             onClick={handleCreate}\n//             disabled={!name}\n//             className=\"w-full py-2 bg-purple-600 text-white rounded disabled:opacity-50\"\n//           >\n//             Create Entity\n//           </button>\n//           {status && <p className=\"text-sm\">{status}</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n\n\n\n// // frontend/src/components/CreateEntityPage.tsx\n// 'use client';\n// import React, { useState } from 'react';\n// import { useAnchorWallet, useWallet } from '@solana/wallet-adapter-react';\n// import { AnchorProvider, Program, web3, utils } from '@coral-xyz/anchor';\n// const idl = require('../idl/ticketing.json');\n// //import idl from '../idl/ticketing.json';\n// // import { Button } from './ui/button';\n// // import { Input } from './ui/input';\n// // import { Card, CardContent, CardHeader, CardTitle } from './ui/card';\n\n// export default function CreateEntityPage() {\n//   const wallet = useAnchorWallet();\n//   const { connect, connected } = useWallet();\n//   const [name, setName] = useState('');\n//   const [status, setStatus] = useState<string | null>(null);\n\n//   const handleCreate = async () => {\n//     if (!wallet) {\n//       setStatus('Please connect your wallet first.');\n//       return;\n//     }\n//     setStatus('Sending transaction...');\n\n//     const connection = new web3.Connection(\n//       process.env.NEXT_PUBLIC_SOLANA_RPC_URL!,\n//       'processed'\n//     );\n//     const provider = new AnchorProvider(connection, wallet, {});\n//     const program = new Program(\n//       idl as any,\n//       new web3.PublicKey(process.env.NEXT_PUBLIC_PROGRAM_ID!),\n//       provider\n//     );\n\n//     try {\n//       const [entityPda] = web3.PublicKey.findProgramAddressSync(\n//         [utils.bytes.utf8.encode('entity'), wallet.publicKey!.toBuffer()],\n//         program.programId\n//       );\n\n//       await program.methods\n//         .initializeEntity(name)\n//         .accounts({\n//           entity: entityPda,\n//           authority: wallet.publicKey!,\n//           systemProgram: web3.SystemProgram.programId,\n//         })\n//         .rpc();\n\n//       setStatus(`Entity created at ${entityPda.toBase58()}`);\n//     } catch (err: any) {\n//       console.error(err);\n//       setStatus(`Error: ${err.message}`);\n//     }\n//   };\n//   return (\n//     <div className=\"max-w-md mx-auto mt-8 border rounded-lg p-6 shadow\">\n//       {!connected ? (\n//         <button\n//           onClick={() => connect()}\n//           className=\"w-full py-2 bg-purple-600 text-white rounded\"\n//         >\n//           Connect Wallet\n//         </button>\n//       ) : (\n//         <div className=\"space-y-4\">\n//           <input\n//             className=\"w-full p-2 border rounded\"\n//             placeholder=\"Entity name\"\n//             value={name}\n//             onChange={(e) => setName(e.target.value)}\n//           />\n//           <button\n//             onClick={handleCreate}\n//             disabled={!name}\n//             className=\"w-full py-2 bg-purple-600 text-white rounded disabled:opacity-50\"\n//           >\n//             Create Entity\n//           </button>\n//           {status && <p className=\"text-sm\">{status}</p>}\n//         </div>\n//       )}\n//     </div>\n//   );\n  \n// }\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///home/devdlaner/nf-tickets/front-end/src/app/organization/register/page.tsx"],"sourcesContent":["// frontend/src/app/organization/register/page.tsx\r\n'use client';\r\n\r\nimport CreateEntityPage from '@/components/CreateEntityPage';\r\n\r\nexport default function RegisterOrgRoute() {\r\n  return <CreateEntityPage />;\r\n}\r\n"],"names":[],"mappings":"AAAA,kDAAkD;;;;;AAGlD;AAFA;;;AAIe,SAAS;IACtB,qBAAO,6LAAC,yIAAA,CAAA,UAAgB;;;;;AAC1B;KAFwB","debugId":null}}]
}